name: CI Build

on:
  workflow_dispatch:
  push:
    paths:
      - 'include/**'
      - 'src/**'
      - 'CMakeOptions.cmake'
      - 'cmake/**'
      - '.github/workflows/build.yml'
  pull_request:
    paths:
      - 'include/**'
      - 'src/**'
      - 'CMakeLists.txt'
      - 'CMakeOptions.cmake'
      - 'cmake/**'
      - '.github/workflows/build.yml'

env:
  BUILD_TYPE: Release
  BUILD_PLATFORM: Desktop
  CPM_SOURCE_CACHE: ${{ github.workspace }}/cpm_modules

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache CPM modules
        id: cache-cpm
        uses: actions/cache@v4
        with:
          path: "**/cpm_modules"
          key: ${{ github.workflow }}-cpm-modules-${{ matrix.os }}-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}
          restore-keys: |
            ${{ runner.os }}-cpm-

      - name: Set up ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          create-symlink: true
          key: ${{ github.workflow }}-ccache-${{ matrix.os }}

      - name: Install dependencies, static analyzers, and sanitizers (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends \
            cppcheck clang-tidy iwyu \
            libglfw3 libglfw3-dev libx11-dev libxcursor-dev libxrandr-dev libxinerama-dev libxi-dev libxext-dev libxfixes-dev libwayland-dev libwayland-bin libxkbcommon-dev

      - name: Install dependencies, static analyzers, and sanitizers (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install \
            cppcheck llvm include-what-you-use glfw
          echo "$(brew --prefix llvm)/bin" >> $GITHUB_PATH

      - name: Configure project with CMake
        run: |
          mkdir -p build && cd build
          cmake -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
                -DCPM_SOURCE_CACHE=${CPM_SOURCE_CACHE} \
                -DCMAKE_C_COMPILER_LAUNCHER=ccache \
                -DUSE_CCACHE=YES \
                -DPLATFORM=${BUILD_PLATFORM} \
                ..

      - name: Build project
        run: cmake --build build --config ${BUILD_TYPE} -j4

